df = NA,
p = NA,
method = paste0('ANCOM-BC2 (pc = ', pc, ')'))}
return(res %>% mutate(data_id = meta$data_id[1]))
}
#corncob------------------------------------------------------------------------
run_corncob <- function(counts, meta, fm = ~ group, ev = T){
nvar <- length(all.vars(fm))
f_phi <- ifelse(ev, '~ 1', '~ group')
fm0 <- if(nvar > 1){update.formula(fm, ~ . - group)}else{ ~ 1}
obj <- corncob::differentialTest(data = t(counts),
sample_data = meta,
formula = fm,
formula_null = fm0,
phi.formula = formula(f_phi),
phi.formula_null = formula(f_phi),
test = "LRT")
res_list <- list()
for(i in 1:nrow(t(counts))){
if(!is.logical(obj$all_models[[i]])){
res_list[[i]] <- obj$all_models[[i]]$coefficients[2, ]
df <- obj$all_models[[i]]$df.residual
}else{
res_list[[i]] <- rep(NA, 4)
names(res_list[[i]]) <- c('Estimate', 'Std. Error', 't value', 'Pr(>|t|)')
}
}
res <- bind_rows(res_list) %>%
dplyr::rename(est = Estimate, se = 'Std. Error') %>%
mutate(taxon = rownames(t(counts)),
df = Inf,
p = 2 * (1 - pnorm(abs(est / se))),
p_lrt = obj$p) %>%
pivot_longer(cols = c(p, p_lrt)) %>%
mutate(method = paste0('corncob (',
ifelse(name == 'p', 'Wald', 'LRT'), ', ev = ',
ev, ')')) %>%
select(taxon, est, se, df, p = value, method)
return(res %>% mutate(data_id = meta$data_id[1]))
}
#DESeq2-------------------------------------------------------------------------
run_deseq <- function(counts, meta, fm = ~ group, norm = 'Default'){
m <- t(counts)
mode(m) <- "integer"
nvar <- length(all.vars(fm))
fm0 <- if(nvar > 1){update.formula(fm, ~ . - group)}else{ ~ 1}
deseq_data <- DESeq2::DESeqDataSetFromMatrix(countData = m,
colData = meta,
design = fm)
if(norm == 'Default'){
sf <- DESeq2::estimateSizeFactorsForMatrix(m, type = 'poscounts')}
if(norm == 'TSS'){
reads <- colSums(m)
sf <- reads / exp(mean(log(reads)))}
if(norm == 'Wrench'){
cond <- meta$group
sf <- Wrench::wrench(mat = m, condition = cond)$nf}
if(norm == 'GMPR'){
sf <- GUniFrac::GMPR(m)
sf <- ifelse(is.na(sf), 1, sf)}
DESeq2::sizeFactors(deseq_data) <- sf
obj <- DESeq2::DESeq(deseq_data, sfType = 'poscounts', quiet = T)
obj_lrt <- DESeq2::DESeq(obj, test = "LRT", reduced = fm0, quiet = T)
res_wald <- DESeq2::results(obj, tidy = T, format = "DataFrame") %>%
mutate(method = paste0('DESeq2 (Wald, ', norm, ')'),
df = Inf) %>%
select(taxon = row, est = log2FoldChange, se = lfcSE, df,
p = pvalue, p_fdr = padj, method)
res_lrt <- DESeq2::results(obj_lrt, tidy = T, format = "DataFrame") %>%
mutate(method = paste0('DESeq2 (LRT, ', norm, ')'),
df = Inf) %>%
select(taxon = row, est = log2FoldChange, p = pvalue, p_fdr = padj, method)
res <- bind_rows(res_wald, res_lrt)
return(res %>% mutate(data_id = meta$data_id[1]))
}
#edgeR--------------------------------------------------------------------------
run_edger <- function(counts, meta, fm = ~ group, norm = 'TMM', test = 'QL'){
mm <- model.matrix(fm, meta)
dge <- edgeR::DGEList(t(counts))
normalized <- edgeR::calcNormFactors(dge, method = norm)
dispersions <- edgeR::estimateDisp(normalized, mm)
if(test == 'QL'){
fit_ql <- edgeR::glmQLFit(dispersions, mm)
obj <- edgeR::glmQLFTest(fit_ql, coef = 2)
}else if(test == 'LRT'){
fit_glm <- edgeR::glmFit(dispersions, mm)
obj <- edgeR::glmLRT(fit_glm, coef = 2)
}
res <- edgeR::topTags(obj, n = ncol(counts))$table %>%
as.data.frame() %>%
rownames_to_column('taxon') %>%
mutate(method = paste0('edgeR (', test, ', ', norm,')')) %>%
select(taxon, est = logFC, p = PValue, method)
return(res %>% mutate(data_id = meta$data_id[1]))
}
#fastANCOM----------------------------------------------------------------------
run_fastancom <- function(counts, meta, fm = ~ group, pseudo = 0.5, sig = 0.05,
ref.rate = 0.05){
covs <- NULL
nvar <- length(all.vars(fm))
if(nvar > 1){
meta$sex <- as.numeric(meta$sex)
covs <- meta %>% select(all_of(all.vars(fm)[2:nvar])) %>% as.matrix
}
obj <- fastANCOM::fastANCOM(Y = counts, x = meta$group, Z = covs,
zero_cut = 1,
pseudo = pseudo,
sig = sig,
ref.rate = ref.rate)
res <- obj$results$final %>%
rownames_to_column('taxon') %>%
mutate(df = nrow(counts) - nvar - 1,
method = paste0('fastANCOM (',
paste(pseudo, sig, ref.rate, sep = ', '), ')')) %>%
select(taxon, est = log2FC, se = log2FC.SD, df,
p = log2FC.pval, reject = REJECT, method)
return(res %>% mutate(data_id = meta$data_id[1]))
}
#LDM----------------------------------------------------------------------------
run_ldm <- function(counts, meta, fm = ~ group, clr = F){
covs <- paste(all.vars(fm)[-1], collapse = ' + ')
if(covs == ""){
obj <- LDM::ldm(counts ~ group, data = meta, comp.anal = clr,
verbose = F, n.cores = 1)
}else{
f <- paste0('counts | (', covs, ') ~ group') %>% as.formula
obj <- LDM::ldm(f, data = meta, comp.anal = clr,
verbose = F, n.cores = 1)
}
stopifnot(rownames(obj$beta) %in% c('groupcase', 'groupcontrol'))
res <- tibble(taxon = names(obj$q.otu.omni),
name = rownames(obj$beta),
dir = ifelse(name == 'groupcontrol', -1, 1),
est_abs = obj$beta[1, ] %>% as.numeric,
est = dir * est_abs,
p = obj$p.otu.omni %>% as.numeric,
p_fdr = obj$q.otu.omni %>% as.numeric,
method = paste0('LDM (CLR = ', clr, ')')) %>%
select(taxon, est, p, p_fdr, method)
return(res %>% mutate(data_id = meta$data_id[1]))
}
#limma-voom---------------------------------------------------------------------
run_limma <- function(counts, meta, fm = ~ group, norm = 'TMM'){
mm <- model.matrix(fm, meta)
dge <- edgeR::DGEList(t(counts))
normalized <- edgeR::calcNormFactors(dge, method = norm)
obj_voom <- limma::voom(normalized, mm, plot = F)
lm_fit <- limma::lmFit(obj_voom, mm)
obj <- limma::eBayes(lm_fit)
res <- limma::topTable(obj, coef = 2, n = ncol(counts), confint = .834) %>%
rownames_to_column('taxon') %>%
mutate(method = paste0('limma-voom (', norm, ')')) %>%
select(taxon, est = logFC, p = P.Value, lwr = CI.L, upr = CI.R, method)
return(res %>% mutate(data_id = meta$data_id[1]))
}
#LinDA--------------------------------------------------------------------------
run_linda <- function(counts, meta, fm = ~ group, zeroh = 'Adaptive', pc = 0.5){
fmc <- paste('~', paste(as.character(fm)[-1], collapse = ' + '))
stopifnot(zeroh %in% c('Adaptive', 'Imputation', 'Pseudo'))
adapt <- zeroh == 'Adaptive'
imp <- zeroh == 'Imputation'
obj <- LinDA::linda(otu.tab = t(counts), meta = meta,
formula = fmc,
adaptive = adapt, imputation = imp,
pseudo.cnt = pc)
res <- obj$output$groupcase %>%
rownames_to_column('taxon') %>%
mutate(method = paste0('LinDA (', zeroh, ', ', pc, ')')) %>%
select(taxon, est = log2FoldChange, se = lfcSE, df, p = pvalue, method)
return(res %>% mutate(data_id = meta$data_id[1]))
}
#Logistic regression (Firth)----------------------------------------------------
run_logr_firth <- function(counts, meta, fm = ~ group){
presences <- 1 * (counts > 0.5)
meta_glm <- meta %>% select(all.vars(fm))
obj <- apply(presences, 2, da_logr_firth, data = meta_glm)
res <- obj %>%
t() %>%
as.data.frame() %>%
rename(est = 1, p = 2, lwr = 3, upr = 4) %>%
rownames_to_column('taxon') %>%
mutate(method = 'LogR (Firth)')
return(res %>% mutate(data_id = meta$data_id[1]))
}
da_logr_firth <- function(y, data){
data$y <- y
# Uncommenting this may cause paste() function work improperly!
# m <- logistf::logistf(y ~ ., data = data, plconf = 2, alpha = .166)
if(sum(y) < length(y)){
c(est = m$coefficients['groupcase'],
p = m$prob['groupcase'],
lwr = m$ci.lower['groupcase'],
upr = m$ci.upper['groupcase'])
}else{
c(0, 1, NA, NA)
}
}
#MaAsLin2-----------------------------------------------------------------------
run_maaslin2 <- function(counts, meta, fm = ~ group, tr = 'LOG', norm = 'TSS'){
obj <- Maaslin2::Maaslin2(input_data = t(counts), input_metadata = meta,
output = 'output', min_prevalence = 0,
normalization = norm, transform = tr,
fixed_effects = all.vars(fm), standardize = F,
plot_heatmap = F, plot_scatter = F)
res <- obj$results %>%
filter(metadata == 'group' & value == 'case') %>%
mutate(df = N - length(all.vars(fm)) - 1,
method = paste0('MaAsLin2 (', tr, ', ', norm, ')')) %>%
select(taxon = feature, est = coef, se = stderr, df, p = pval, method)
return(res %>% mutate(data_id = meta$data_id[1]))
}
#metagenomeSeq------------------------------------------------------------------
run_mgs <- function(counts, meta, norm = 'CSS'){
mgs_data <- metagenomeSeq::newMRexperiment(counts = t(counts),
phenoData = afr(meta))
if(norm == 'CSS'){
normalized <- metagenomeSeq::cumNorm(mgs_data, p = 0.5)}
if(norm == 'Wrench'){
normalized <- metagenomeSeq::wrenchNorm(mgs_data, meta$group)}
if(norm == 'TSS'){
normalized <- mgs_data
metagenomeSeq::normFactors(normalized) <- rowSums(counts)}
if(norm == 'GMPR'){
normalized <- mgs_data
sf <- GUniFrac::GMPR(t(counts))
sf <- ifelse(is.na(sf), 1, sf)
sf <- sf * rowSums(counts)
metagenomeSeq::normFactors(normalized) <- sf
}
obj_mgs <- metagenomeSeq::fitFeatureModel(normalized,
model.matrix(~ 1 + group,
data = meta))
res <- metagenomeSeq::MRfulltable(obj_mgs, number = ncol(counts)) %>%
rownames_to_column('taxon') %>%
mutate(df = Inf,
method = paste0('mSeq (', norm, ')')) %>%
select(taxon, est = logFC, se, df, p = pvalues, method)
return(res %>% mutate(data_id = meta$data_id[1]))
}
afr <- Biobase::AnnotatedDataFrame
#Negativebinomial regression----------------------------------------------------
run_nb <- function(counts, meta, fm = ~ group){
d <- tibble(x = meta$group, libr = log(rowSums(counts)))
res <- apply(counts, 2, da_nb, d = d) %>%
t() %>%
as.data.frame() %>%
rownames_to_column('taxon') %>%
mutate(method = paste0('NB')) %>%
select(taxon, est, se, df, p, method)
return(res %>% mutate(data_id = meta$data_id[1]))
}
da_nb <- function(y, d){
d$y <- y
m <- glmmTMB::glmmTMB(y ~ x + offset(libr),
family = glmmTMB::nbinom2, data = d)
cf <- coef(summary(m))$cond
c(est = cf[2, 1], se = cf[2, 2], df = Inf, p = cf[2, 4])
}
#Ordinal regression model-------------------------------------------------------
run_orm <- function(counts, meta, fm = ~ group, norm = 'TSS'){
m <- t(counts)
meta2 <- meta %>%
mutate(sex = as.numeric(meta$sex),
group = ifelse(meta$group == 'control', 0, 1))
mf <- meta2 %>% select(all.vars(fm)) %>% as.matrix
if(norm == 'TSS'){
sf <- colSums(m)}
if(norm == 'Wrench'){
cond <- meta$group
sf <- Wrench::wrench(mat = m, condition = cond)$nf}
if(norm == 'GMPR'){
sf <- GUniFrac::GMPR(m)
sf <- ifelse(is.na(sf), 1, sf)}
normalized <- counts / sf
res <- apply(normalized, 2, da_orm, mf = mf) %>%
t() %>%
as.data.frame() %>%
rename(est = 1, se = 2, p_lrt = 3, p_score = 4) %>%
mutate(taxon = colnames(counts),
df = Inf,
p = 2 * (1 - pnorm(abs(est / se)))) %>%
pivot_longer(cols = c(p, p_lrt, p_score)) %>%
mutate(method = paste0('ORMW (',
case_when(name == 'p' ~ 'Wald, ',
name == 'p_lrt' ~ 'LRT, ',
name == 'p_score' ~ 'Score, '),
norm, ')')) %>%
select(taxon, est, se, df, p = value, method)
return(res %>% mutate(data_id = meta$data_id[1]))
}
da_orm <- function(y, mf){
m1 <- rms::orm(as.numeric(y) ~ mf)
if(ncol(mf) > 1){
dv1 <- m1$deviance[2]
score1 <- m1$stats['Score']
m0 <- rms::orm(as.numeric(y) ~ mf[, -1])
dv0 <- m0$deviance[2]
score0 <- m0$stats['Score']
p <- ifelse(!m0$fail, 1 - pchisq((dv0 - dv1), df = 1), NA)
p_score <- ifelse(!m0$fail, 1 - pchisq((score1 - score0), df = 1), NA)
}else{
p <- ifelse(!m1$fail, m1$stats['P'], NA)
p_score <- ifelse(!m1$fail, m1$stats['Score P'], NA)
}
if(!m1$fail){
values <- c(m1$coefficients['group'], sqrt(m1$var[2, 2]), p, p_score)
}else{
values <- rep(NA, 4)
}
return(as.numeric(values))
}
#Run methods--------------------------------------------------------------------
load('data_171023.rds')
create_fm <- function(d){
bmi <- ifelse(d$meta$is_bmi[1], '+ bmi', '')
age <- ifelse(d$meta$is_age[1], '+ age', '')
sex <- ifelse(d$meta$is_sex[1], '+ sex', '')
half <- str_detect(d$meta$data_id[1], 'half')
fm <- ~ group
if(half) fm <- paste0('~ group', bmi, age, sex) %>% as.formula
return(fm)
}
datasets <- keep(d_all, ~ create_fm(.) != ~ group)
lcounts <- map(datasets, ~ .$counts)
lmeta <- map(datasets, ~ .$meta)
lfm <- map(datasets, create_fm)
View(lfm)
#Run methods--------------------------------------------------------------------
load('data_171023.rds')
create_fm <- function(d){
bmi <- ifelse(d$meta$is_bmi[1], '+ bmi', '')
age <- ifelse(d$meta$is_age[1], '+ age', '')
sex <- ifelse(d$meta$is_sex[1], '+ sex', '')
half <- str_detect(d$meta$data_id[1], 'half')
fm <- ~ group
if(half) fm <- paste0('~ group', bmi, age, sex) %>% as.formula
return(fm)
}
datasets <- keep(d_all, ~ create_fm(.) != ~ group)[1:2]
lcounts <- map(datasets, ~ .$counts)
lmeta <- map(datasets, ~ .$meta)
lfm <- map(datasets, create_fm)
future::plan(future::multisession, workers = 7)
funs <- list(
~ run_aldex(..1, ..2, ..3, glm = T),
~ run_ancombc2(..1, ..2, ..3),
~ run_corncob(..1, ..2, ..3),
~ run_deseq(..1, ..2, ..3),
~ run_edger(..1, ..2, ..3),
~ run_fastancom(..1, ..2, ..3),
~ run_limma(..1, ..2, ..3),
~ run_linda(..1, ..2, ..3),
#~ run_logr_firth(..1, ..2, ..3), #see commnets on da_logr_firth function
~ run_orm(..1, ..2, ..3)
)
resl <- list()
Sys.time()
for(k in 1:length(funs)){
rs <- NULL
try(rs <- furrr::future_pmap(list(lcounts, lmeta, lfm), funs[[k]],
.options = furrr::furrr_options(seed = 1),
.progress = T))
resl[[k]] <- rs
print(k)
print(Sys.time())
}
save(res_list, file = 'res_covariates.rds')
res_ldm <- res_maaslin <- list()
for(i in 1:length(datasets)){
counts <- lcounts[[i]]
meta <- lmeta[[i]]
res_ldm[[i]] <- run_ldm(counts, meta, fm)
res_maaslin2[[i]] <- run_maaslin2(counts, meta, fm)
}
res_ldm <- res_maaslin <- list()
for(i in 1:length(datasets)){
counts <- lcounts[[i]]
meta <- lmeta[[i]]
fm <- lfm[i]
res_ldm[[i]] <- run_ldm(counts, meta, fm)
res_maaslin2[[i]] <- run_maaslin2(counts, meta, fm)
}
View(resl)
all.vars(fm)
fm <- lfm[i]
res_ldm <- res_maaslin <- list()
for(i in 1:length(datasets)){
counts <- lcounts[[i]]
meta <- lmeta[[i]]
fm <- lfm[[i]]
res_ldm[[i]] <- run_ldm(counts, meta, fm)
res_maaslin2[[i]] <- run_maaslin2(counts, meta, fm)
}
res_ldm <- res_maaslin <- list()
for(i in 1:length(datasets)){
counts <- lcounts[[i]]
meta <- lmeta[[i]]
fm <- lfm[[i]]
res_ldm[[i]] <- run_ldm(counts, meta, fm)
res_maaslin[[i]] <- run_maaslin2(counts, meta, fm)
}
res_list <- c(resl, res_ldm, res_maaslin)
save(res_list, file = 'res_covariates.rds')
library(data.table)
#Helper functions---------------------------------------------------------------
geom_qr <- ggbeeswarm::geom_quasirandom
ggarr <- ggpubr::ggarrange
pblank <- ggplot() + theme_void()
std01 <- function(x){(x - min(x)) / (max(x) - min(x))}
round2 <- function(x, decimals = 2){
format(round(x, decimals), nsmall = decimals)
}
date <- format(Sys.Date(), "%d%m%y")
#Load files and prepare tibble of results---------------------------------------
load('res_covariates.rds')
load('data_meta_041023.rds')
load('data_prevl_061023.rds')
res_all <- bind_rows(res_list) %>%
left_join(., d_meta, by = 'data_id') %>%
left_join(., d_prevl, by = c('data_id', 'taxon')) %>%
as.data.table() %>%
.[method %in% c('ALDEx2 (glm)',
'ANCOM-BC2 (pc = 0)',
'corncob (LRT, ev = TRUE)',
'DESeq2 (Wald, Default)',
'edgeR (QL, TMM)',
'fastANCOM (0.5, 0.05, 0.05)',
'LDM (CLR = FALSE)',
'limma-voom (TMM)',
'LinDA (Adaptive, 0.5)',
'LogR (Firth)',
'MaAsLin2 (LOG, TSS)',
'mSeq (CSS)',
'ORMW (Score, TSS)')] %>%
.[, method := ifelse(method == 'mSeq (CSS)', 'metagenomeSeq', method)] %>%
.[, method := ifelse(method == 'ORMW (Score, TSS)', 'ORM/Wilcox', method)] %>%
.[, method := tstrsplit(method, " ", fixed = T, keep = 1)] %>%
.[, analysis := tstrsplit(data_id, " ", fixed = T, keep = 1)] %>%
.[, q := p.adjust(p, method = 'BH'),
by = c('data_id', 'method')] %>%
.[, q := ifelse(grepl('DESeq2|LDM', method, perl = T),
p_fdr, q)] %>%
.[, t91.7 := qt(.834 + (1 - .834) / 2, df = df)] %>%
.[, lwr := ifelse(is.na(lwr), est - t91.7 * se, lwr)] %>%
.[, upr := ifelse(is.na(upr), est + t91.7 * se, upr)] %>%
.[, disease := ifelse(disease == 'EDD', 'CDI', disease)] %>%
filter(site == 'stool')
#Calculate values of the evaluation metrics-------------------------------------
sgn_level1 <- sgn_level2 <- .05
ol1h <- res_all %>%
filter(analysis == 'half' & half == 1) %>%
select(method, type, study, iter, taxon,
pco1 = prevl_control, pca1 = prevl_case,
est1 = est, q, lwr1 = lwr, upr1 = upr)
ol2h <- res_all %>%
filter(analysis == 'half' & half == 2) %>%
mutate(is2 = T) %>%
select(method, type, study, iter, taxon, is2,
pco2 = prevl_control, pca2 = prevl_case,
est2 = est, p, lwr2 = lwr, upr2 = upr)
olh <- left_join(ol1h, ol2h, by = c('method', 'study', 'iter', 'taxon')) %>%
filter(q < sgn_level1 & !is.na(is2)) %>%
mutate(sgn1 = q < sgn_level1,
d1 = ifelse(is.na(est1) | is.nan(est1), 0, sign(round(est1, 8))),
s1 = if_else(sgn1 & d1 != 0, T, F, F),
sgn2 = p < sgn_level2,
d2 = ifelse(is.na(est2) | is.nan(est2), 0, sign(round(est2, 8))),
s2 = if_else(sgn2 & d2 != 0, T, F, F),
nores = d2 == 0,
repl = s1 & s2 & d1 == d2,
same = s1 & !s2 & d1 == d2 & !nores,
opposite = s1 & !s2 & d1 != d2 & !nores,
anti = s1 & s2 & d1 != d2,
is_ci = pco1 >= .10 & pca1 >= .10 & pco1 >= .10 & pca1 >= .10,
cvg = lwr1 >= lwr2 & lwr1 <= upr2 | lwr2 >= lwr1 & lwr2 <= upr1,
cvg = ifelse(is.na(cvg), F, cvg),
cvg = ifelse(is_ci, cvg, NA)) %>%
mutate_if(is.logical, as.numeric) %>%
mutate(check = repl + same + opposite + anti + nores) %>%
select(method, study, iter, taxon,
est1, q, est2, p, sgn1, d1, s1, sgn2, d2, s2,
repl, same, opposite, anti, nores, is_ci, cvg, check)
stopifnot(sum(olh$check != 1) == 0)
n_studies <- nrow(olh %>% distinct(study, iter))
hits_h <- ol1h %>%
filter(q < sgn_level1) %>%
group_by(method) %>%
summarize(nhit = n())
res_h <- olh %>%
group_by(method) %>%
summarize_at(vars(repl, same, opposite, anti, nores, cvg, is_ci),
~ sum(., na.rm = T)) %>%
ungroup() %>%
left_join(., hits_h, 'method') %>%
mutate(n = repl + same + opposite + anti + nores,
panti = anti / n * 100,
prepl = repl / n * 100,
popp = (anti + opposite + .5 * nores) / n * 100,
pcvg = cvg / is_ci * 100,
method_an = fct_reorder(method, -(anti +.001) / n),
method_re = fct_reorder(method, prepl),
method_op = fct_reorder(method, -popp),
method_ci = fct_reorder(method, pcvg),
method_nh = fct_reorder(method, nhit))
res_h <- olh %>%
group_by(method) %>%
summarize_at(vars(repl, same, opposite, anti, nores, cvg, is_ci),
~ sum(., na.rm = T)) %>%
ungroup() %>%
left_join(., hits_h, 'method')
View(res_h)
View(ol1h)
